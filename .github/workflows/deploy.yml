name: Deploy to AWS EC2 with Docker Compose

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # 1. Exporta credenciais e variável AWS_REGION
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            us-east-1   # <- região, não AZ

      # 2. Login no ECR (sem inputs extras)
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 3. Build e push (tag já apontando pro seu registry do ECR)
      - name: Build & push image
        env:
          REGISTRY:   ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: juscash
          IMAGE_TAG:  ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push    $REGISTRY/$REPOSITORY:$IMAGE_TAG

      # 4. Deploy na EC2 via SSH
      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          HOST:        ${{ secrets.EC2_HOST }}   # ec2-3-83-173-255.compute-1.amazonaws.com
          USER: ubuntu
        run: |
          echo "$PRIVATE_KEY" | tr -d '\r' > key
          chmod 600 key

          ssh -o StrictHostKeyChecking=no -i key $USER@$HOST <<'EOF'
            set -e   # Pare na primeira falha

            # 1. Instala o Docker Compose v2 (plugin) se ainda não tiver
            if ! docker compose version >/dev/null 2>&1; then
              sudo apt-get update -y
              sudo apt-get install -y docker-compose-plugin
            fi

            # 2. Define pasta do app
            APP_DIR=/home/ubuntu/juscash   # <-- ajuste para seu caso

            # 3. Clona se não existir
            if [ ! -d "$APP_DIR/.git" ]; then
              git clone https://github.com/celsolnv/juscash-backend.git "$APP_DIR"
            fi

            # 4. Atualiza código e containers
            cd "$APP_DIR"
            git pull origin main
            docker compose pull
            docker compose up -d --build
          EOF

